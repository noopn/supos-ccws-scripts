#!/usr/bin/env node

const path = require('path');
const crypto = require('crypto');
const stream = require('stream');
const { promisify } = require('util');


const chalk = require('chalk');
const inquirer = require('inquirer');

const fse = require('fs-extra');
const webpack = require('webpack');
const TerserPlugin = require("terser-webpack-plugin");
const { merge } = require('webpack-merge');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const { glob, sync } = require('glob');
const baseConfig = require('../config/webpack.config');
const context = require('../src/context.js');

const ora = require('ora');

const spinner = ora();

const {
    compareDependencies,
    analysisLockData,
    checkAppPath,
    analysisLockInfo
} = require('../src/util');


const {
    LOCK_CACHE_PATH,
    INFO_CACHE_PATH,
} = require('../config');

const {
    createFolder,
    createFile,
    login,
    logout
} = require('../src/service');

const pipeline = promisify(stream.pipeline);
const hasLockFile = fse.pathExistsSync(LOCK_CACHE_PATH);
const hasInfoFile = fse.pathExistsSync(INFO_CACHE_PATH);

const diffDeps = compareDependencies();


if (diffDeps.length) {
    diffDeps.forEach(([depName, localVer, depVer]) => console.log(`${chalk.hex('#cb3837')('error')} uninstall ${depName}@${localVer} in your work folder, ${depName}@${depVer} have been installed in CLI.`))
    process.exit(0);
}

if (!hasLockFile && !hasInfoFile) {
    console.log(
        chalk.hex('#cb3837')('error'),
        'You haven\'t pull the project, run "yarn sup:pull" or "npm run sup:dev" first.',
    )
    process.exit(0);
}

const basePath = path.resolve(process.cwd(), './src');


try {
    (async () => {
        const {
            lockFileAndFolderMap,
            lockFileMap,
            lockFolderMap,
            lockAppMap,
            lockComponentMap
        } = await analysisLockData();

        checkAppPath(lockAppMap);

        const appPaths = glob.sync(path.join(basePath, '*'));

        const inquirerData = (await Promise.all(
            appPaths.map(async appPath => {
                const componentPaths = glob.sync(path.join(appPath, './*'));
                const { appId } = lockAppMap[appPath];
                const components = await Promise.all(componentPaths.map(async (componentPath) => {
                    const componentTempData = {
                        appId,
                        componentName: String(componentPath.split('/').slice(-1)),
                        componentOutputPath: `${componentPath}/compiled`,
                        id: componentPath,
                    };
                    Object.assign(componentTempData, {
                        status: lockComponentMap[componentPath] ? 'normal' : 'new'
                    })
                    const fileAndFolderPaths = glob.sync(path.join(componentPath, './**/**'));

                    await Promise.all(fileAndFolderPaths.map(async fileOrFolderPath => {

                        const stat = fse.statSync(fileOrFolderPath);
                        if (stat.isDirectory() && !lockFolderMap[fileOrFolderPath]) {
                            Object.assign(componentTempData, {
                                status: componentTempData.status == 'new' ? 'new' : 'update'
                            })
                        } else if (stat.isFile()) {
                            const content = fse.readFileSync(fileOrFolderPath);
                            const hash = crypto.createHash('sha256').update(content).setEncoding('hex').digest('hex');
                            if (!lockFileMap[fileOrFolderPath] || lockFileMap[fileOrFolderPath].hash !== hash) {
                                Object.assign(componentTempData, {
                                    status: componentTempData.status == 'new' ? 'new' : 'update'
                                })
                            }
                            if (new RegExp(`${componentPath}/source/index`).test(fileOrFolderPath)) {
                                Object.assign(componentTempData, {
                                    componentEntryPath: fileOrFolderPath
                                })
                            }
                        }
                    }))
                    return componentTempData;
                }))
                return {
                    appName: String(appPath.split('/').slice(-1)),
                    components: components.filter(component => component.status !== 'normal')
                };
            })
        )).filter(app => app.components.length);

        if (!inquirerData.length) {
            spinner.succeed(chalk.hex('#29ABE2')('Work folder is clean, nothing need to push!'))
            process.exit(0);
        }

        const choices = await inquirer
            .prompt([
                {
                    type: 'checkbox',
                    message: 'Select the components you want to push.',
                    name: 'components',
                    choices: inquirerData.map(app => [
                        new inquirer.Separator(`ðŸ’¡ ${app.appName}`),
                        app.components
                            .map(component => [
                                {
                                    name: `${component.componentName} ${component.status == 'new' ? "ðŸ”¥" : "ðŸ†™"}`,
                                    value: component
                                },
                            ])
                    ]).flat(Infinity),
                    validate(answer) {
                        if (answer.length < 1) {
                            return 'You must choose at least one component.';
                        }

                        return true;
                    },
                },
            ]);

        choices.components.forEach(component => {
            if (component.componentEntryPath) return;
            console.log(
                chalk.hex('#cb3837')('error'),
                `Your component [${component.componentName}] don't have entry file, please check it!`,
            )
            process.exit(0);
        })
        const componentNeedToSync = choices.components;

        spinner.start(chalk.hex('#e4e4e4')(`Run build compiler.`));

        await Promise.all(componentNeedToSync.map(component => new Promise((resolve, reject) => {
            const webpackConfig = merge(baseConfig, {
                entry: component.componentEntryPath,
                output: {
                    path: component.componentOutputPath,
                    libraryTarget: 'commonjs',
                },
                module: {
                    generator: {
                        asset: {
                            publicPath: `/resource/${component.appId}/extensions/${component.componentName}/compiled/`,
                        }
                    },
                    rules: [
                        {
                            test: /\.(png|jpe?g|gif|webp)$/,
                            type: 'asset',
                            generator: {
                                filename: '[hash][ext]',
                            },
                        },
                    ]
                },
                mode: 'production',
                optimization: {
                    minimize: true,
                    minimizer: [
                        new TerserPlugin({
                            parallel: true,
                            extractComments: false,
                            terserOptions: {
                                compress: true,
                            },
                        }),
                    ],
                },
                externals: {
                    react: 'commonjs2 react',
                    lodash: 'commonjs2 lodash',
                    moment: 'commonjs2 moment'
                },
                plugins: [
                    new CleanWebpackPlugin()
                ]
            })

            const compiler = webpack(webpackConfig);
            compiler.run(resolve);
        })))

        spinner.succeed(chalk.hex('#e4e4e4')('Compiler succeed!'));

        const syncList = [];
        await Promise.all(componentNeedToSync.map(async component => {
            const syncFilePath = glob.sync(path.join(component.id, './**/**'));
            await Promise.all(syncFilePath.map(async fileOrFolderPath => {
                const stat = fse.statSync(fileOrFolderPath);
                const restFolderPath = fileOrFolderPath.split(basePath)[1];
                const [_, appName, ...restPath] = restFolderPath.split('/');
                if (stat.isDirectory() && !lockFolderMap[fileOrFolderPath]) {
                    const folderInfo = {
                        id: fileOrFolderPath,
                        folderName: String(fileOrFolderPath.split('/').slice(-1)),
                        hasSub: false,
                        path: `/extensions/${restPath.join('/')}`,
                        fullPath: `/resource/${component.appId}/extensions/${restPath.join('/')}`,
                        parentPath: `/resource/${component.appId}/extensions/${restPath.slice(0, -1).join('/')}`,
                        localFolderPath: fileOrFolderPath,
                        localFolderParentPath: fileOrFolderPath.split('/').slice(0, -1).join('/'),
                        localAppPath: path.join(basePath, appName),
                        localComponentPath: path.join(basePath, appName, component.componentName),
                        appId: component.appId,
                        type: 'folder'
                    }
                    if (lockFolderMap[folderInfo.localFolderParentPath]) lockFileAndFolderMap[folderInfo.localFolderParentPath].hasSub = true;

                    lockFileAndFolderMap[fileOrFolderPath] = folderInfo;
                    syncList.push({
                        ...folderInfo,
                        status: 'new'
                    })
                } else if (stat.isFile() && !lockFileMap[fileOrFolderPath]) {
                    const content = fse.readFileSync(fileOrFolderPath);
                    const hash = crypto.createHash('sha256').update(content).setEncoding('hex').digest('hex');
                    const fileInfo = {
                        id: fileOrFolderPath,
                        hash,
                        path: `/extensions/${restPath.join('/')}`,
                        fullPath: `/resource/${component.appId}/extensions/${restPath.join('/')}`,
                        localAppPath: path.join(basePath, appName),
                        localComponentPath: path.join(basePath, appName, component.componentName),
                        localFileFolder: fileOrFolderPath.split('/').slice(-1).join('/'),
                        localFilePath: fileOrFolderPath,
                        appId: component.appId,
                        type: 'file'
                    }
                    lockFileAndFolderMap[fileOrFolderPath] = fileInfo;
                    syncList.push({
                        ...fileInfo,
                        status: 'new'
                    })
                } else if (stat.isFile() && lockFileMap[fileOrFolderPath]) {
                    const content = fse.readFileSync(fileOrFolderPath);
                    const hash = crypto.createHash('sha256').update(content).setEncoding('hex').digest('hex');
                    if (hash !== lockFileAndFolderMap[fileOrFolderPath].hash) {
                        lockFileAndFolderMap[fileOrFolderPath].hash = hash;
                        syncList.push({
                            ...lockFileAndFolderMap[fileOrFolderPath],
                            status: 'update'
                        })
                    }
                }
            }))
        }))

        const options = await analysisLockInfo();
        context.set('options', options);

        const loginMsg = await login();

        if (loginMsg.adminLimit) {
            console.log(
                chalk.black.bgHex('#cb3837')('connect error'),
                chalk.hex('#cb3837')(`Maximum Number of Users ${loginMsg.adminLimit}, please check your service`)
            );
            process.exit(0)
        }

        context.set('loginMsg', loginMsg);
        await Promise.all(syncList.map(async item => {
            if (item.type === 'folder') {
                spinner.start(chalk.hex('#e4e4e4')(`File: ${item.path}`));
                await createFolder(item)
                spinner.succeed(chalk.hex('#e4e4e4')(`${item.path}`));
            } else if (item.type === 'file') {
                spinner.start(chalk.hex('#e4e4e4')(`File: ${item.path}`));
                await createFile(item);
                spinner.succeed(chalk.hex('#e4e4e4')(`${item.path}`));
            }
        }))

        const folderLockStream = new stream.Readable();

        Object.entries(lockFileAndFolderMap).forEach(([id, values]) => {
            let folderLockData = '';
            folderLockData += `<@id>${id}\n`;
            Object.entries(values).forEach(([key, value]) => {
                if (key === 'id') return;
                folderLockData += `  <@${key}>${value}\n`;
            })
            folderLockData += `\n`;

            folderLockStream.push(folderLockData);
        })
        folderLockStream.push(null);

        await fse.remove(LOCK_CACHE_PATH);

        await pipeline(
            folderLockStream,
            fse.createWriteStream(LOCK_CACHE_PATH, { 'flags': 'a' })
        )

        spinner.succeed(chalk.hex('#29ABE2')('Sync all files succeed!'));

        await logout();

    })()
} catch (err) {
    console.log(err);
    logout();
}


process.on('uncaughtException', (err) => {
    process.exit(1);
})